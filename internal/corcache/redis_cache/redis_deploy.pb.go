// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: redis_deploy.proto

package redis_cache

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *string `protobuf:"bytes,1,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redis_deploy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_redis_deploy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_redis_deploy_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type RedisDeploymentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Env  map[string]string `protobuf:"bytes,2,rep,name=env,proto3" json:"env,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *RedisDeploymentConfig) Reset() {
	*x = RedisDeploymentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redis_deploy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisDeploymentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisDeploymentConfig) ProtoMessage() {}

func (x *RedisDeploymentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_redis_deploy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisDeploymentConfig.ProtoReflect.Descriptor instead.
func (*RedisDeploymentConfig) Descriptor() ([]byte, []int) {
	return file_redis_deploy_proto_rawDescGZIP(), []int{1}
}

func (x *RedisDeploymentConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RedisDeploymentConfig) GetEnv() map[string]string {
	if x != nil {
		return x.Env
	}
	return nil
}

type RedisClientConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DB             int32    `protobuf:"varint,1,opt,name=DB,proto3" json:"DB,omitempty"`
	User           string   `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Password       string   `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	RouteByLatency bool     `protobuf:"varint,4,opt,name=RouteByLatency,proto3" json:"RouteByLatency,omitempty"`
	RouteRandomly  bool     `protobuf:"varint,5,opt,name=RouteRandomly,proto3" json:"RouteRandomly,omitempty"`
	Addrs          []string `protobuf:"bytes,6,rep,name=Addrs,proto3" json:"Addrs,omitempty"`
}

func (x *RedisClientConfig) Reset() {
	*x = RedisClientConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_redis_deploy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedisClientConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedisClientConfig) ProtoMessage() {}

func (x *RedisClientConfig) ProtoReflect() protoreflect.Message {
	mi := &file_redis_deploy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedisClientConfig.ProtoReflect.Descriptor instead.
func (*RedisClientConfig) Descriptor() ([]byte, []int) {
	return file_redis_deploy_proto_rawDescGZIP(), []int{2}
}

func (x *RedisClientConfig) GetDB() int32 {
	if x != nil {
		return x.DB
	}
	return 0
}

func (x *RedisClientConfig) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *RedisClientConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *RedisClientConfig) GetRouteByLatency() bool {
	if x != nil {
		return x.RouteByLatency
	}
	return false
}

func (x *RedisClientConfig) GetRouteRandomly() bool {
	if x != nil {
		return x.RouteRandomly
	}
	return false
}

func (x *RedisClientConfig) GetAddrs() []string {
	if x != nil {
		return x.Addrs
	}
	return nil
}

var File_redis_deploy_proto protoreflect.FileDescriptor

var file_redis_deploy_proto_rawDesc = []byte{
	0x0a, 0x12, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x22, 0x32, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa2, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x03, 0x65, 0x6e, 0x76, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x52,
	0x65, 0x64, 0x69, 0x73, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x03, 0x65,
	0x6e, 0x76, 0x1a, 0x36, 0x0a, 0x08, 0x45, 0x6e, 0x76, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb7, 0x01, 0x0a, 0x11, 0x52,
	0x65, 0x64, 0x69, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x0e, 0x0a, 0x02, 0x44, 0x42, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x44, 0x42,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x26, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x42, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x42,
	0x79, 0x4c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x6c, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x41, 0x64, 0x64, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x41,
	0x64, 0x64, 0x72, 0x73, 0x32, 0xaf, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x12, 0x4e, 0x0a, 0x06, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x22, 0x2e, 0x72, 0x65, 0x64,
	0x69, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x1e,
	0x2e, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x52, 0x65, 0x64,
	0x69, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x00,
	0x12, 0x44, 0x0a, 0x08, 0x55, 0x6e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x12, 0x22, 0x2e, 0x72,
	0x65, 0x64, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x1a, 0x12, 0x2e, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x00, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x49, 0x53, 0x45, 0x2d, 0x53, 0x4d, 0x49, 0x4c, 0x45, 0x2f, 0x63,
	0x6f, 0x72, 0x72, 0x61, 0x6c, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x63,
	0x6f, 0x72, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_redis_deploy_proto_rawDescOnce sync.Once
	file_redis_deploy_proto_rawDescData = file_redis_deploy_proto_rawDesc
)

func file_redis_deploy_proto_rawDescGZIP() []byte {
	file_redis_deploy_proto_rawDescOnce.Do(func() {
		file_redis_deploy_proto_rawDescData = protoimpl.X.CompressGZIP(file_redis_deploy_proto_rawDescData)
	})
	return file_redis_deploy_proto_rawDescData
}

var file_redis_deploy_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_redis_deploy_proto_goTypes = []interface{}{
	(*Error)(nil),                 // 0: redis_cache.Error
	(*RedisDeploymentConfig)(nil), // 1: redis_cache.RedisDeploymentConfig
	(*RedisClientConfig)(nil),     // 2: redis_cache.RedisClientConfig
	nil,                           // 3: redis_cache.RedisDeploymentConfig.EnvEntry
}
var file_redis_deploy_proto_depIdxs = []int32{
	3, // 0: redis_cache.RedisDeploymentConfig.env:type_name -> redis_cache.RedisDeploymentConfig.EnvEntry
	1, // 1: redis_cache.RedisDeploymentStrategy.Deploy:input_type -> redis_cache.RedisDeploymentConfig
	1, // 2: redis_cache.RedisDeploymentStrategy.Undeploy:input_type -> redis_cache.RedisDeploymentConfig
	2, // 3: redis_cache.RedisDeploymentStrategy.Deploy:output_type -> redis_cache.RedisClientConfig
	0, // 4: redis_cache.RedisDeploymentStrategy.Undeploy:output_type -> redis_cache.Error
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_redis_deploy_proto_init() }
func file_redis_deploy_proto_init() {
	if File_redis_deploy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_redis_deploy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redis_deploy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisDeploymentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_redis_deploy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedisClientConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_redis_deploy_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_redis_deploy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_redis_deploy_proto_goTypes,
		DependencyIndexes: file_redis_deploy_proto_depIdxs,
		MessageInfos:      file_redis_deploy_proto_msgTypes,
	}.Build()
	File_redis_deploy_proto = out.File
	file_redis_deploy_proto_rawDesc = nil
	file_redis_deploy_proto_goTypes = nil
	file_redis_deploy_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RedisDeploymentStrategyClient is the client API for RedisDeploymentStrategy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RedisDeploymentStrategyClient interface {
	Deploy(ctx context.Context, in *RedisDeploymentConfig, opts ...grpc.CallOption) (*RedisClientConfig, error)
	Undeploy(ctx context.Context, in *RedisDeploymentConfig, opts ...grpc.CallOption) (*Error, error)
}

type redisDeploymentStrategyClient struct {
	cc grpc.ClientConnInterface
}

func NewRedisDeploymentStrategyClient(cc grpc.ClientConnInterface) RedisDeploymentStrategyClient {
	return &redisDeploymentStrategyClient{cc}
}

func (c *redisDeploymentStrategyClient) Deploy(ctx context.Context, in *RedisDeploymentConfig, opts ...grpc.CallOption) (*RedisClientConfig, error) {
	out := new(RedisClientConfig)
	err := c.cc.Invoke(ctx, "/redis_cache.RedisDeploymentStrategy/Deploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisDeploymentStrategyClient) Undeploy(ctx context.Context, in *RedisDeploymentConfig, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := c.cc.Invoke(ctx, "/redis_cache.RedisDeploymentStrategy/Undeploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedisDeploymentStrategyServer is the server API for RedisDeploymentStrategy service.
type RedisDeploymentStrategyServer interface {
	Deploy(context.Context, *RedisDeploymentConfig) (*RedisClientConfig, error)
	Undeploy(context.Context, *RedisDeploymentConfig) (*Error, error)
}

// UnimplementedRedisDeploymentStrategyServer can be embedded to have forward compatible implementations.
type UnimplementedRedisDeploymentStrategyServer struct {
}

func (*UnimplementedRedisDeploymentStrategyServer) Deploy(context.Context, *RedisDeploymentConfig) (*RedisClientConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deploy not implemented")
}
func (*UnimplementedRedisDeploymentStrategyServer) Undeploy(context.Context, *RedisDeploymentConfig) (*Error, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Undeploy not implemented")
}

func RegisterRedisDeploymentStrategyServer(s *grpc.Server, srv RedisDeploymentStrategyServer) {
	s.RegisterService(&_RedisDeploymentStrategy_serviceDesc, srv)
}

func _RedisDeploymentStrategy_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedisDeploymentConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisDeploymentStrategyServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redis_cache.RedisDeploymentStrategy/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisDeploymentStrategyServer).Deploy(ctx, req.(*RedisDeploymentConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisDeploymentStrategy_Undeploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedisDeploymentConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisDeploymentStrategyServer).Undeploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/redis_cache.RedisDeploymentStrategy/Undeploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisDeploymentStrategyServer).Undeploy(ctx, req.(*RedisDeploymentConfig))
	}
	return interceptor(ctx, in, info, handler)
}

var _RedisDeploymentStrategy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "redis_cache.RedisDeploymentStrategy",
	HandlerType: (*RedisDeploymentStrategyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Deploy",
			Handler:    _RedisDeploymentStrategy_Deploy_Handler,
		},
		{
			MethodName: "Undeploy",
			Handler:    _RedisDeploymentStrategy_Undeploy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "redis_deploy.proto",
}
